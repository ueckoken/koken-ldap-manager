import { generateNTLMHash } from "./utils/hash";
import { IClientConfig, Client } from "ldap-ts-client";
import crypto from 'crypto';
const passwordhasher = require('password-hasher');

const SID_PREFIX = process.env["SID_PREFIX"];
const adminPassword = process.env["ADMIN_PASSWORD"];

const config: IClientConfig = {
  ldapServerUrl: "ldap://ldap.ueckoken.club",
  user: "cn=admin,dc=ldap,dc=ueckoken,dc=club",
  pass: adminPassword
};

const client = new Client(config);

async function getCurrentUserId(): Promise<number> {
  const curid = await client.queryAttributes({
    base: "cn=curid,ou=idpoolconf,dc=ldap,dc=ueckoken,dc=club",
    attributes: ["uidNumber"]
  });
  return Number(curid[0].uidNumber)
}

async function getCurrentGroupId(): Promise<number> {
  const curid = await client.queryAttributes({
    base: "cn=curid,ou=idpoolconf,dc=ldap,dc=ueckoken,dc=club",
    attributes: ["gidNumber"]
  });
  return Number(curid[0].gidNumber)
}

async function updateCurrentUserId(uid: number): Promise<void> {
  await client.modifyAttribute({
    dn: "cn=curid,ou=idpoolconf,dc=ldap,dc=ueckoken,dc=club",
    changes: [
      {
        operation: "replace",
        modification: {
          uidNumber: uid
        }
      }
    ]
  });
}

async function createNewUser(
  username: string,
  firstname: string,
  lastname: string,
  password: string,
  discordId: string,
  email: string
): Promise<void> {

  /* 最新のUIDをPoolから取ってくる */
  const uidNumber: number = await getCurrentUserId();

  /* UID PoolのUIDをincrementする
    uidはuniqueなのでincrementしないとidpoolと衝突する
  */
  await updateCurrentUserId(uidNumber + 1);

  /* パスワードをSHA512でハッシュ化する */
  const hashedPassword = passwordhasher.createHash('sha512', password, crypto.randomBytes(8));
  const RFCFormatPasswordHash = passwordhasher.formatRFC2307(hashedPassword);

  /* Samba用にLM/NTLMでハッシュ化する */
  const [lmHashedPassword, ntHashedPassword] = generateNTLMHash(password);

  const isSuccesful = await client.add({
    dn: `uid=${username},ou=people,dc=ldap,dc=ueckoken,dc=club`,
    entry: {
      /* Object Class */
      objectclass: [
        "top",
        "posixAccount",
        "shadowAccount",
        "person",
        "organizationalPerson",
        "inetOrgPerson",
        "sambaSamAccount",
        "sambaIdmapEntry",
        "apple-user"
      ],
      /* CN(Full Name) */
      cn: `${firstname} ${lastname}`,
      /* Description */
      description: "Auto generated by Koken LDAP Manager",
      /* DiscordID(KeyCloakでMapping済み) */
      displayname: discordId,
      /* Gropu Number(UNIX) */
      gidnumber: "1000000",
      /* 苗字 */
      sn: `${firstname}`,
      /* 名前 */
      givenname: `${lastname}`,
      /* Home Directory */
      homedirectory: `/home/${username}`,
      /* MailAddress */
      mail: email,
      /* ユーザーID (must be unique) */
      uid: username,
      /* ユーザーID (ユーザーが作られた順番に振られる) */
      uidnumber: String(uidNumber),
      /* ユーザパスワード (SHA512でハッシュ済み) */
      userpassword: RFCFormatPasswordHash,
      /* パスワードの最終更新日 */
      pwdlastset: "-1", /* -1: 更新していない */
      /* Sambaでのアカウント種別 */
      sambaacctflags: "[U          ]", /* U:User, W:Workstation... */
      /* Sambaの有効期限 */
      sambakickofftime: "0", /* 0: 無効にしない */
      /* SambaLanManagerPassword: lmHashed */
      sambalmpassword: lmHashedPassword,
      /* Samba NTPassword: md4 hashed(NTLM) */
      sambantpassword: ntHashedPassword,
      /* Sambaのパスワード変更履歴 */
      sambapasswordhistory: "0000000000000000000000000000000000000000000000000000000000000000",
      /* Sambaでパスワードが期限切れになってから何日で無効にするか */
      sambapwdlastset: "-1",
      /* ユーザーのSambaId : 先頭部分は固定で、最後がユーザー固有(1000+uidNumber%1000000*2)  */
      sambasid: `${SID_PREFIX}-${1000 + (uidNumber % 1000000 * 2)}`,
      /* パスワードが期限切れになってから何日で無効にするか */
      shadowexpire: "-1", /* -1: 無効にしない */
      /* 予約 (defaultで0) */
      shadowflag: "0",
      /* パスワードの有効期限 */
      shadowinactive: "0", /* 0: 無効にしない */
      /* パスワードの最終更新日 (1970/1/1からの日数) */
      shadowlastchange: "0", /* 0: 初回ログイン時に変更を求める */
      /* パスワード変更要求までの日数 */
      shadowmax: "99999", /* 99999: 無期限 */
      /* パスワード変更不能日数 (一度パスワードを変更した後) */
      shadowmin: "0", /* 0: 特に制限しない */
      /* パスワード期限満了時に警告を何日前に出すか */
      shadowwarning: "7"
    }
  });

  if (!isSuccesful) {
    await updateCurrentUserId(uidNumber);
    throw new Error("Failed to create new user");
  }
}

async function main() {
  await createNewUser("takumi", "Takumi", "Kentaro", "koken", "koken#0000", "ueckoken@gmail.com");
  await client.unbind();
}
main();